// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// singleStepScore
float singleStepScore(int r0, int b0, int r1, int b1);
RcppExport SEXP _musette_singleStepScore(SEXP r0SEXP, SEXP b0SEXP, SEXP r1SEXP, SEXP b1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type r0(r0SEXP);
    Rcpp::traits::input_parameter< int >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< int >::type r1(r1SEXP);
    Rcpp::traits::input_parameter< int >::type b1(b1SEXP);
    rcpp_result_gen = Rcpp::wrap(singleStepScore(r0, b0, r1, b1));
    return rcpp_result_gen;
END_RCPP
}
// takeGraph
void takeGraph(Rcpp::GenericVector& data);
RcppExport SEXP _musette_takeGraph(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::GenericVector& >::type data(dataSEXP);
    takeGraph(data);
    return R_NilValue;
END_RCPP
}
// takeGroups
void takeGroups(Rcpp::LogicalVector& red, Rcpp::LogicalVector& blue);
RcppExport SEXP _musette_takeGroups(SEXP redSEXP, SEXP blueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type red(redSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type blue(blueSEXP);
    takeGroups(red, blue);
    return R_NilValue;
END_RCPP
}
// growTree
void growTree();
RcppExport SEXP _musette_growTree() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    growTree();
    return R_NilValue;
END_RCPP
}
// encodeSolutionTree
Rcpp::List encodeSolutionTree();
RcppExport SEXP _musette_encodeSolutionTree() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(encodeSolutionTree());
    return rcpp_result_gen;
END_RCPP
}
// takeStepScore
void takeStepScore(int stepMode);
RcppExport SEXP _musette_takeStepScore(SEXP stepModeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type stepMode(stepModeSEXP);
    takeStepScore(stepMode);
    return R_NilValue;
END_RCPP
}
// resetSolutionTree
void resetSolutionTree();
RcppExport SEXP _musette_resetSolutionTree() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    resetSolutionTree();
    return R_NilValue;
END_RCPP
}
// setBound
void setBound(int treeSize);
RcppExport SEXP _musette_setBound(SEXP treeSizeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type treeSize(treeSizeSEXP);
    setBound(treeSize);
    return R_NilValue;
END_RCPP
}
// setThreshold
void setThreshold(double threshold);
RcppExport SEXP _musette_setThreshold(SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    setThreshold(threshold);
    return R_NilValue;
END_RCPP
}
// fullyGrowTree
void fullyGrowTree();
RcppExport SEXP _musette_fullyGrowTree() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    fullyGrowTree();
    return R_NilValue;
END_RCPP
}
// exploreTree
Rcpp::List exploreTree();
RcppExport SEXP _musette_exploreTree() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(exploreTree());
    return rcpp_result_gen;
END_RCPP
}
// rawDominationGraphFineTuned
Rcpp::List rawDominationGraphFineTuned(Rcpp::IntegerVector chromosome, Rcpp::IntegerVector locus, int distance, double redPercent, double bluePercent);
RcppExport SEXP _musette_rawDominationGraphFineTuned(SEXP chromosomeSEXP, SEXP locusSEXP, SEXP distanceSEXP, SEXP redPercentSEXP, SEXP bluePercentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type chromosome(chromosomeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type locus(locusSEXP);
    Rcpp::traits::input_parameter< int >::type distance(distanceSEXP);
    Rcpp::traits::input_parameter< double >::type redPercent(redPercentSEXP);
    Rcpp::traits::input_parameter< double >::type bluePercent(bluePercentSEXP);
    rcpp_result_gen = Rcpp::wrap(rawDominationGraphFineTuned(chromosome, locus, distance, redPercent, bluePercent));
    return rcpp_result_gen;
END_RCPP
}
// connectedComponents
Rcpp::GenericVector connectedComponents(Rcpp::GenericVector neighbours);
RcppExport SEXP _musette_connectedComponents(SEXP neighboursSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::GenericVector >::type neighbours(neighboursSEXP);
    rcpp_result_gen = Rcpp::wrap(connectedComponents(neighbours));
    return rcpp_result_gen;
END_RCPP
}
// scc
Rcpp::GenericVector scc(Rcpp::GenericVector neighbours);
RcppExport SEXP _musette_scc(SEXP neighboursSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::GenericVector >::type neighbours(neighboursSEXP);
    rcpp_result_gen = Rcpp::wrap(scc(neighbours));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_musette_singleStepScore", (DL_FUNC) &_musette_singleStepScore, 4},
    {"_musette_takeGraph", (DL_FUNC) &_musette_takeGraph, 1},
    {"_musette_takeGroups", (DL_FUNC) &_musette_takeGroups, 2},
    {"_musette_growTree", (DL_FUNC) &_musette_growTree, 0},
    {"_musette_encodeSolutionTree", (DL_FUNC) &_musette_encodeSolutionTree, 0},
    {"_musette_takeStepScore", (DL_FUNC) &_musette_takeStepScore, 1},
    {"_musette_resetSolutionTree", (DL_FUNC) &_musette_resetSolutionTree, 0},
    {"_musette_setBound", (DL_FUNC) &_musette_setBound, 1},
    {"_musette_setThreshold", (DL_FUNC) &_musette_setThreshold, 1},
    {"_musette_fullyGrowTree", (DL_FUNC) &_musette_fullyGrowTree, 0},
    {"_musette_exploreTree", (DL_FUNC) &_musette_exploreTree, 0},
    {"_musette_rawDominationGraphFineTuned", (DL_FUNC) &_musette_rawDominationGraphFineTuned, 5},
    {"_musette_connectedComponents", (DL_FUNC) &_musette_connectedComponents, 1},
    {"_musette_scc", (DL_FUNC) &_musette_scc, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_musette(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
